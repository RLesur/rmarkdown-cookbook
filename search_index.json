[
["index.html", "R Markdown Cookbook Preface", " R Markdown Cookbook Michael Harper, Yihui Xie 2018-09-29 Preface This book is in a very early stage of development. If you have any suggestions on what should be included within this book, please get in touch via GitHub R Markdown is a powerful tool for combining analysis and reporting into the same document. Since the development of the rmarkdown package (Allaire et al. 2018), it has grown to become a diverse ecosystem of code, and reports, books and websites can all easily be generated directly from R code. There is a wealth of guidance which has grown over the past few years, and the book R Markdown: The Definitive Guide (Yihui Xie 2018) provides an overview of all that can be done with R Markdown. However, as noted by Yihui, it was commented by the publisher that it would be beneficial to provide more practical examples of the use of R Markdown. And so, the idea of this book was born. To fill the gap for official documentation, users often seek for help on StackOverflow. At the time of writing, there were almost 4,000 different questions with the r-markdown tag. However, the use of the website is relatively difficult if you do not have a specific problem you are trying to search for, and therefore it is hard to be able to tell what is possible with R Markdown unless you have the insight to search for a specific question. This book aims to draw together much existing literature from StackOverflow, and provide up-to-date solutions for everyday queries that users commonly face. This book is designed to provide a range of examples of how to extend the functionality of your R Markdown documents. As a cookbook, this guide is recommended to new or intermediate R Markdown users who are looking for practical examples of how R Markdown documents can be effectively updated. References "],
["how-to-read-this-book.html", "How to read this book", " How to read this book The book is designed to highlight the many ways in which your R Markdown documents can be customized. Users are encouraged to try using the concepts within their own documents. The code detailed in the book should be sufficient, but the full source code and examples are provided on GitHub. It is recommended that readers have a basic understanding of R Markdown. Chapter 2 of R Markdown: The Definitive Guide (Yihui Xie 2018) provides a great overview of the basics of R Markdown and is recommended background reading for any new users of R Markdown. It should be noted that this guide does not intend to provide a full technical reference for R Markdown, and there is already extensive literature available on these topics. This book aims to supplement, not replace, this existing literature, and it is therefore recommended that readers explore the following books if they seek further information: R Markdown: The Definitive guide (Yihui Xie 2018): provides an overview of the R Markdown package and the wide range of ways it can be used. Dynamic documents and knitr: provides more detailed technical guidance on the inner workings of rmarkdown and knitr (Xie 2018c). Authoring books with bookdown (Xie 2016): a short book which provides details on the bookdown package (Xie 2018b), which is designed to simplify the creation of long-format documents in R Markdown. blogdown: Creating Websites with R Markdown (Xie, Hill, and Thomas 2017): provides details of the blogdown package (Xie 2018a) package. Where relevant, this book provides references to these existing resources. References "],
["structure-of-the-book.html", "Structure of the book", " Structure of the book The book is broken down into small “recipes” which aim to demonstrate a single concept at a time. Chapter content to be finalised once recipes created. "],
["software-info.html", "Software information and conventions", " Software information and conventions The R session information used when compiling this book is as follows: xfun::session_info(c( &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39;), dependencies = FALSE) ## R version 3.5.1 (2017-01-27) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 14.04.5 LTS ## ## Locale: ## LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C ## LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 ## LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 ## LC_PAPER=en_US.UTF-8 LC_NAME=C ## LC_ADDRESS=C LC_TELEPHONE=C ## LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C ## ## Package version: ## bookdown_0.7.19 knitr_1.20 rmarkdown_1.10 We do not add prompts (&gt; and +) to R source code in this book, and we comment out the text output with two hashes ## by default, as you can see from the R session information above. This is for your convenience when you want to copy and run the code (the text output will be ignored since it is commented out). Package names are in bold text (e.g., rmarkdown), and inline code and filenames are formatted in a typewriter font (e.g., knitr::knit('foo.Rmd')). Function names are followed by parentheses (e.g., blogdown::serve_site()). The double-colon operator :: means accessing an object from a package. “Rmd” is the filename extension of R Markdown files, and also an abbreviation of R Markdown in this book. "],
["acknowledgements.html", "Acknowledgements", " Acknowledgements "],
["author.html", "About the Authors", " About the Authors "],
["installation.html", "Chapter 1 Installation", " Chapter 1 Installation We assume you have already installed R (https://www.r-project.org) (R Core Team 2017) and the RStudio IDE (https://www.rstudio.com). RStudio is not required but recommended, because it makes it easier for an average user to work with R Markdown. If you do not have RStudio IDE installed, you will have to install Pandoc (http://pandoc.org), otherwise there is no need to install Pandoc separately because RStudio has bundled it. Next you can install the rmarkdown package in R: # Install from CRAN install.packages(&#39;rmarkdown&#39;) # Or if you want to test the development version, # install from GitHub if (!requireNamespace(&quot;devtools&quot;)) install.packages(&#39;devtools&#39;) devtools::install_github(&#39;rstudio/rmarkdown&#39;) References "],
["basics.html", "Chapter 2 Basics", " Chapter 2 Basics This book by no means intends to be a comprehesive guide to R Markdown, however before we start, it is important to provide an overview of the R Markdown ecosystem before we explain how to make changes to it. This chapter therefore aims to provide the basic concepts required for the book. For those seeking the background, we recommend that readers refer to (The R Markdown Definitive Guide)[https://bookdown.org/yihui/rmarkdown/], which provides a comprenhensive overview of the R Markdown components. "],
["r-markdown-components.html", "2.1 R Markdown components", " 2.1 R Markdown components R Markdown combines several different processes together to create documents, and one of the main sources of confusion from R Markdown is how all the components work together. Fortunately, as a user, it is not essential to understand all the inner workings of these processes to be able to create documents. However, as a user who may be seeking to alter the behaviour of a document, it is important to understand the components which part is responsible for what. This makes it a lot easier to seek help as you can target your searches on the correct area. The basic workflow structure for an R Markdown document is shown in Figure 2.1, highlighting the processes (arrows) and the intermediate files which are created before producing the output. Each stage is explained in further detail below. knitr::include_graphics(&quot;images/workflow.png&quot;) Figure 2.1: Schematic highlighting the R Markdown workflow. (DRAFT DIAGRAM) The .Rmd document is the original format of the document. It contains a combination of YAML, text and code chunks. knitr is used to convert any code embedded within the .Rmd file. This will run all the R code contained within the report and prepare the outputs to be displayed within the output results. All these results are converted into the correct markup language to be contained within the temporary .md file. The .md file is processed by pandoc, a multipurpose tool which is designed to convert files from one markup language to another. This takes any parameters specified within the YAML frontmatter of the document (e.g. title, author, date) to convert the document to the output format specified in the output argument (HTML/PDF/Word). If the output document is PDF, there is an additional layer of processing, as Pandoc will convert the raw .md into an intermediate 'tex file. This is file is then processed by LaTeX to form the final PDF document. As a final clarification, the bookdown package is often used within more complex, multiple file books such as this. This essentially provides a layer of preprocessing to the R Markdown document which extends the functionality of the rmarkdown package. "],
["controlling-each-layer.html", "2.2 Controlling Each layer", " 2.2 Controlling Each layer The way in which knitr can be controlled is via the code chunk options. To set variables in a single location, we can use ```{r, echo = FALSE, message = FALSE} ``` Alternatively, we can set global properties for a R Markdown document. "],
["formatting.html", "Chapter 3 Formatting", " Chapter 3 Formatting One of the strengths of the markdown language is that it’s simplicity makes it very easy to read even to newcomers to understand. This is one of its key design principles, and as outlined creator of the markdown language: A Markdown-formatted document should be publishable as-is, as plain text, without looking like it’s been marked up with tags or formatting instructions. – John Gruber However, this comes at a cost of customisation, and many of the features which users of typical word processors are used to are not directly accessible. This includes: Changing font size Changing font colour Editing font alignment Indenting text It can be helpful for such features to be included within documents. This chapter provides an extended guide to the basics of the R Markdown language, and highlights how we can customise the appearance and styling within an R Markdown document. If you need a reminder in the basics of the markdown language, the R Markdown cheatsheet provides a good overview of the basic syntax. "],
["changing-font-colour.html", "3.1 Changing Font Colour", " 3.1 Changing Font Colour The markdown syntax has no built-in method for changing text colours. We can use HTML and LaTeX syntax to change the formatting of words: For HTML: we can wrap the text in the &lt;font color='&quot;,color,&quot;'&gt;&quot;,x,&quot;&lt;/font&gt; command. For PDF: we can use the LaTeX command \\textcolor{}{}. This requires the extra LaTeX package xcolor. As an example of changing the colour in PDF text: --- output: pdf_document: extra_dependencies: [&quot;xcolor&quot;] --- Roses are \\textcolor{red}{red}, violets are \\textcolor{blue}{blue} 3.1.1 Multi-output text colour We should attempt to design our R Markdown documents to allow for multiple outputs. If we embed raw HTML or LaTeX code into our documents, this formatting will be ignored in the other output format. We can write a custom function which will insert the correct syntax depending on the output format using the is_latex_output() and is_html_output functions as follows: format_with_col = function(x, color){ if(knitr::is_latex_output()) paste(&quot;\\\\textcolor{&quot;,color,&quot;}{&quot;,x,&quot;}&quot;,sep=&quot;&quot;) else if(knitr::is_html_output()) paste(&quot;&lt;font color=&#39;&quot;,color,&quot;&#39;&gt;&quot;,x,&quot;&lt;/font&gt;&quot;,sep=&quot;&quot;) else x } We can then use the code as an inline R expression format_with_col(&quot;red&quot;, &quot;red&quot;) which will create red text. "],
["indenting-text.html", "3.2 Indenting Text", " 3.2 Indenting Text Markdown will ignore indentations by default. However, we may want to keep indentation within the text, for example within verses and addresses. In these situations, we can use line blocks by starting the line with a vertical bar (|). The division into lines will be preserved in the output, as will any leading spaces; otherwise, the lines will be formatted as Markdown. As an example: | The limerick packs laughs anatomical | In space that is quite economical. | But the good ones I&#39;ve seen | So seldom are clean | And the clean ones so seldom are comical The limerick packs laughs anatomical In space that is quite economical.    But the good ones I’ve seen    So seldom are clean And the clean ones so seldom are comical The lines can be hard-wrapped if needed, but the continuation line must begin with a space. For example: | The Right Honorable Most Venerable and Righteous Samuel L. Constable, Jr. | 200 Main St. | Berkeley, CA 94718 "],
["document-elements.html", "Chapter 4 Document Elements", " Chapter 4 Document Elements There are lots of small tips and tricks that can be used to customize the content of R Markdown documents. This chapter provides short recipes which are useful for tweaking the behaviour of your own R Markdown documents. "],
["include-appendix-after-bibliography.html", "4.1 Include Appendix after Bibliography", " 4.1 Include Appendix after Bibliography By default, the bibliography appears at the very end of the document. However, there can be cases where we want to place additional text after the references, most typically if we wish to include appendices within the document. We can force the position of the references by using &lt;div id=&quot;refs&quot;&gt;&lt;/div&gt;, as shown below: # References &lt;div id=&quot;refs&quot;&gt;&lt;/div&gt; # Appendices We can improve this further by using the bookdown package, which offers a special header for the Appendix as shown with the syntax below: # References &lt;div id=&quot;refs&quot;&gt;&lt;/div&gt; # (APPENDIX) Appendix {-} # Appendix A # Appendix B The numbering style of appendices will be automatically changed in LaTeX/PDF and HTML output (usually in the form A, A.1, A.2, B, B.1, …). "],
["cross-referencing-tables-and-figures.html", "4.2 Cross-referencing Tables and Figures", " 4.2 Cross-referencing Tables and Figures Cross-referencing is a useful way of directing your readers through your document. Cross-referencing requires you to use bookdown must be using the bookdown package for cross-referencing to function. "],
["set-date-to-current-date.html", "4.3 Set Date to Current Date", " 4.3 Set Date to Current Date It may be useful for the date of the knitted R Markdown document to automatically update each time we rerun the file. To do this, we can add R code directly to the date field in the YAML, and use the Sys.time() function to extract the current date. As this function will by default provide the date and time, we must specify the desired date time format as shown below: --- date: &quot;`r format(Sys.time(), &#39;%d %B, %Y&#39;)`&quot; --- This will automatically update each time you Knit your document i.e. 29 September, 2018. If we wish to customize the format of the dates, we can alter the time format by providing our own text string. Some examples are shown as follows: %B %Y: September 2018 %d/%m/%y: “29/09/18 %d/%m/%y: Sat 29 Sep A full table of POSIXct formats is shown in Table 4.1, which allows users to construct their required date format. Table 4.1: Date Time Formats within R Code Meaning Code Meaning %a Abbreviated weekday %A Full weekday %b Abbreviated month %B Full month %c Locale-specific date and time %d Decimal date %H Decimal hours (24 hour) %I Decimal hours (12 hour) %j Decimal day of the year %m Decimal month %M Decimal minute %p Locale-specific AM/PM %S Decimal second %U Decimal week of the year (starting on Sunday) %w Decimal Weekday (0=Sunday) %W Decimal week of the year (starting on Monday) %x Locale-specific Date %X Locale-specific Time %y 2-digit year %Y 4-digit year %z Offset from GMT %Z Time zone (character) As a final note, you may even want to include some explanatory text along with the date. We can easily add any text such as “Last Compiled on” before the R code as follows: --- date: &quot;Last compiled on `r format(Sys.time(), &#39;%d %B, %Y&#39;)`&quot; --- "],
["adding-multiple-authors-to-document.html", "4.4 Adding Multiple Authors to Document", " 4.4 Adding Multiple Authors to Document We can add multiple authors to a R Markdown document within the YAML in a number of ways. If we simply want to list them on the same line, we can provide a text string to the document: --- title: &quot;Untitled&quot; author: &quot;John Doe, John Smith&quot; --- Alternatively, if we wish for each entry to be on its own line we can provide a list of entries to the YAML field. This can be useful if you wish to include further information about each author such as an email address or instituion: --- author: - John Doe, Institution One - John Smith, Institution Two --- We can make use of the markdown syntax ^[] to add additional information as a footnote to the document. This may be more useful if you have extended information you wish to include for each author, such as providing a contact email, address etc. The exact behaviour will depend on the output format (HTML/PDF/Word): --- author: - John Doe^[Institution One, email@domain.com] - John Doe 2^[Institution Two, email2@domain.com] --- Certain R Markdown templates will allow you to specify additional parameters directly within the YAML. For example, the Radix output format allows url, affiliation and affiliation_url to be specified. We must first install the Radix package from GitHub: devtools::install_github(&quot;rstudio/radix&quot;) We can use the new format by changing the output option as specified below: --- title: &quot;Radix for R Markdown&quot; author: - name: &quot;JJ Allaire&quot; url: https://github.com/jjallaire affiliation: RStudio affiliation_url: https://www.rstudio.com output: radix::radix_article --- "],
["latex.html", "Chapter 5 LaTeX", " Chapter 5 LaTeX For many authors, the main output of their work will be the PDF report, and will be able to utilise the styling of LaTeX. In this chapter, we discuss approaches which can be used to customise the output of PDF reports. Users should approach with a note of caution. One of the major benefits of R Markdown is the fact that a single source document can create documents with multiple formats. By tailoring your work to a single output format (PDF/Word/HTML), you may improve the appearance and performance of a single output but at the expense of this tranferability. "],
["inserting-commands.html", "5.1 Inserting Commands", " 5.1 Inserting Commands "],
["latex-preamble.html", "5.2 LaTeX preamble", " 5.2 LaTeX preamble "],
["multi-figure-plots.html", "5.3 Multi-figure plots", " 5.3 Multi-figure plots If we need to print multiple output graphs or figures, there are several ways this can be achieved. "],
["cross-output.html", "5.4 Cross-output", " 5.4 Cross-output As explained in https://bookdown.org/yihui/rmarkdown/r-code.html#figures of Yihui Xie (2018), we can place multiple figures side-by-side using the fig.hold='hold' along with the out.width option. As an example below, we have set the out.width=&quot;50%&quot;: plot(1:10) plot(rnorm(10), pch=19) Figure 5.1: Side-by-side figures The main benefits of this approach is that it is easily achieved, and also works for both PDF and HTML outputs. References "],
["include-additional-latex-packages.html", "5.5 Include additional LaTeX packages", " 5.5 Include additional LaTeX packages If your primary output format for your R Markdown document is PDF, then the use of additional LaTeX packages can allow for extensive customization of document styling. In addition, several packages such as kableExtra may have LaTeX dependencies for the R package to function. Much like R, we need to load packages within the R Markdown document before we are able to use their functions. 5.5.1 Loading LaTeX Packages We can load additional LaTeX packages using the extra_dependencies option within the pdf_document YAML settings. This allows us to provide a list of R Markdown packages: --- title: &quot;Untitled&quot; output: pdf_document: extra_dependencies: [&quot;bbm&quot;, &quot;threeparttable&quot;] --- If you need to specify options when loading the package, you can add a second-level to the list and provide the options as a list: output: pdf_document: extra_dependencies: caption: [&quot;labelfont={bf}&quot;] hyperref: [&quot;unicode=true&quot;, &quot;breaklinks=true&quot;] lmodern: null For those familiar with LaTeX, this is equivalent to the following LaTeX file: \\usepackage[labelfont={bf}]{caption} \\usepackage[unicode=true, breaklinks=true]{hyperref} \\userpackage{lmodern} 5.5.2 Example Packages There is an extensive community for LaTeX, and there are over 4,000 packages available through the Comprohensive Tex Archive Network (CTAN). As some examples of LaTeX packages you could consider using within your analysis: pdfpages: include full PDF pages within your document. This is useful if you wish to have appendices within your document caption: change the appearance of caption subtitles. For example, you can make the Figure title italics, centered. fancyhdr: change the style of page headers. "],
["latex-subfigures.html", "5.6 LaTeX subfigures", " 5.6 LaTeX subfigures When writing a document you may want to include some slightly more complicated figures with multiple images. Subfigures are a useful LaTeX feature which allows us to achieve this by plotting multiple figures within a single plot and providing each with their own subcaption. Subfigures require the LaTeX package subfig. The line \\usepackage{subfig} must therefore be included within the YAML, or if you are using an external tex template you can add this to that file. For example: As listed within the knitr chunk options, subfigures require a few additional settings to be set in the chunk header: fig.subcap is a list of the captions for subfigures fig.ncol: the number of columns of subfigures out.width: the output width of the figures. You will normally set this 100% divided by the number of sub columns. An example is demonstrated below: ```yaml output: pdf_document: extra_dependencies: caption: [&quot;labelfont={bf}&quot;] ``` ```{r fig-sub, fig.cap=&#39;two plots&#39;, fig.subcap=c(&#39;one plot&#39;, &#39;the other one&#39;), out.width=&#39;.49\\\\linewidth&#39;, fig.asp=1, fig.ncol = 2} plot(1:10) plot(rnorm(10), pch=19) ``` The output is shown in Figure 5.2. knitr::include_graphics(&quot;images/subfigure.png&quot;, dpi = NA) Figure 5.2: An example subcaption 5.6.1 Using with list "],
["html-output.html", "Chapter 6 HTML Output", " Chapter 6 HTML Output How to customise the appearance of HTML documents: CSS styles Adapt some of the details from here: https://rmarkdown.rstudio.com/html_document_format.html "],
["tabbed-headings.html", "6.1 Tabbed headings", " 6.1 Tabbed headings https://stackoverflow.com/questions/38062706/rmarkdown-tabbed-and-untabbed-headings?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa "],
["multi-format-projects.html", "Chapter 7 Multi-format projects", " Chapter 7 Multi-format projects One of the main benefits of R Markdown can create multiple output formats from a single source document. This book example is available in all three formats, with PDF, ebook and online versions all being available. Project should therefore ideally be designed to be flexible for the multiple outputs. However, users will often find themselves wanting to fine-tune the output, and doing so will often require This chapter aims to provide several examples on how a document can be customised with output specific features, whilst also retaining the ability to export documents to multiple formats. "],
["control-output.html", "7.1 Control Output", " 7.1 Control Output Dsigning custom behavior which can respond to change in outputs using is_latex_output etc. For example, you may want to have interactive tables using DT:datatable in the HTML output but print static versions in the PDF. "],
["output-specific-functions.html", "7.2 Output-specific functions", " 7.2 Output-specific functions HTML documents have the capacity to contain. The webshot package is available to take screenshots of HTML elements for non-interactive output formats (ebooks, PDF). library(ggplot2) library(plotly) p &lt;- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = &quot;dodge&quot;) ggplotly(p) "],
["designing-output.html", "7.3 Designing output", " 7.3 Designing output If we wish to design our own format-specific function we can use the functions knitr::is_latex_output() andknitr::is_html_output`. These function will return a TRUE/FALSE action knitr::is_html_output() This can be used to control the output of statements. "],
["knitr-hooks.html", "Chapter 8 Knitr Hooks", " Chapter 8 Knitr Hooks Knitr hooks: these are explained within previous R Markdown book Include practical examples could be very useful for readers to see the power of it. Use some of these: https://gist.github.com/yihui/2629886 "],
["tables.html", "Chapter 9 Tables", " Chapter 9 Tables provide more detailed documentation on kable Using kableExtra to style tables "],
["diagrams.html", "Chapter 10 Diagrams", " Chapter 10 Diagrams It is often useful to express analysis using flowcharts and diagrams within reports. Although there are many separate programs which can be used to produce these, it can be beneficial to create these within our analysis directly. This makes it easier to update and edit the graph if we need to edit it in the future, and allows us to use the results from our analysis directly within the diagrams, making them more information. While there are several different packages available for R, we will focus on the package DiagrammeR (Iannone 2018). We also recommend that you read at http://rich-iannone.github.io/DiagrammeR/index.html . In this chapter we will explain some of the basic usages of the package. References "],
["basic-diagrams.html", "10.1 Basic Diagrams", " 10.1 Basic Diagrams DiagrammeR provides methods to build graphs for a number of different graphing languages. R Studio provides native support for Graphviz (.gv) and mermaid (.mmd) files. Using files of these types in RStudio provides the advantage of syntax coloring and allowing a quick preview of the diagram. For example, we can make a simple flowchart with the following code: DiagrammeR::grViz(&quot;digraph { graph [layout = dot, rankdir = LR] node [shape = rectangle] rec1 [label = &#39;Step 1&#39;] rec2 [label = &#39;Step 2&#39;] rec3 [label = &#39;Step 3&#39;] rec4 [label = &#39;Step 4&#39;] # edge definitions with the node IDs rec1 -&gt; rec2 -&gt; rec3 -&gt; rec4 }&quot;, height = 200) Figure 10.1: A basic graphic using DiagrammeR There are extensive controls which can be used to control the shape of nodes, colours, line types and add additional parameters. "],
["adding-parameters-to-plots.html", "10.2 Adding parameters to plots", " 10.2 Adding parameters to plots Graphviz substitution allows for mixing in R expressions into a Graphviz graph specification without sacrificing readability. If you specify a subsitution with @@, you must ensure there is a valid expression for that substitution. The expressions are placed as footnotes and their evaluations must result in an R vector object (i.e., not a data frame, list, or matrix). Because there is the possibility to have multiple substitutions, numbering is required. Thus, the @@ notation is immediately followed by a number and that number should correspond to the number of the footnoted R expression. For example, suppose we have a dataset which is being analysed, and we would like to identify how many values are removed at each stage of a process. DiagrammeR::grViz(&quot; digraph graph2 { graph [layout = dot, rankdir = LR] # node definitions with substituted label text node [shape = rectangle] a [label = &#39;@@1&#39;] b [label = &#39;@@2&#39;] c [label = &#39;@@3&#39;] d [label = &#39;@@4&#39;] a -&gt; b -&gt; c -&gt; d } [1]: paste(&#39;Input Data&#39;, 1) [2]: paste(&#39;Step &#39;, 1) [3]: paste(&#39;Step &#39;, 1) [4]: paste(&#39;Step &#39;, 1) &quot;) "],
["managing-big-projects.html", "Chapter 11 Managing Big Projects", " Chapter 11 Managing Big Projects Practical tips on how a big project should be managed source is particularly useful for loading external scripts so that the R Markdown project isn’t too bloated with code. Ideas: - Use (ref:tag) to store page formatting options which might need to be reused. For example a page break "],
["sourcing-files.html", "11.1 Sourcing Files", " 11.1 Sourcing Files A benefit of using R Markdown is that it is easy source(&quot;yourScript.R&quot;) "],
["caching.html", "11.2 Caching", " 11.2 Caching Caching Ways it can be tailored to suit analysis. This cache invalidation is a great example: https://stackoverflow.com/questions/18376008/invalidate-a-chunks-cache-when-uncached-chunk-changes "],
["notifications.html", "11.3 Notifications", " 11.3 Notifications Can link R Markdown with notifications if have long analysis Working with non R users Use HTML outputs and interactive graphics "],
["altering-citation-style.html", "11.4 Altering Citation Style", " 11.4 Altering Citation Style Using short author citations: https://stackoverflow.com/questions/48303890/using-short-author-citations-in-bookdown-rmarkdown?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa "],
["automatically-generate-package-citations.html", "11.5 Automatically Generate Package Citations", " 11.5 Automatically Generate Package Citations It is important to that an acknowledgements is provided within your work to authors of any literature or software referenced. Within a typical workflow, this can be a frustrating experience if you are required to manually identify the correctly formatted citations, load them into a referencing software and then refer to them within the text. However, R Markdown makes it easy to streamline this process. We can generate a BibTex file for packages used within your analysis using the write_bib function within R Markdown. # automatically create a bib database for R packages knitr::write_bib(c( .packages(), &#39;bookdown&#39;, &#39;knitr&#39;, &#39;rmarkdown&#39;, &#39;DiagrammeR&#39; ), &#39;packages.bib&#39;) To refer to the packages in the text, we must add bibliography: packages.bib to the YAML frontmatter, and then references can be made using the format [@R-package] where package is replaced with the package name i.e. [@R-rmarkdown]. This will be replaced with an intext citation and will be added to the bibliography at the end of your document. Note, that the write_bib command is designed to overwrite the existing bibliography. If you want to manually add any other items to the bibligraphy in your document, it is recommended that you create a second .bib file which is also referred to within the YAML bibliography field, as shown below: --- bibliography: [packages.bib. references.bib] --- "],
["references.html", "References", " References "]
]
