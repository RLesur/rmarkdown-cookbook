[
["index.html", "R Markdown Cookbook Preface Recommended Reading", " R Markdown Cookbook Michael Harper, Yihui Xie 2018-08-08 Preface One of the common criticisms of markdown as a language is that it naturally limits what you can write. Users often therefore feel limited in what they can achieve with advanced customisation. However, there are a growing range of options available to achieve tailor the outputs of documents. This book aims to bring together useful tips for R Markdown. Although there are many resources available, many of these cover the basics of R Markdown. Recommended Reading There are already several fantastic books out there which you may have already read: Dynamic documents and knitr R Markdown: The Definitive guide Authoring books with bookdown Blogdown "],
["intro.html", "Chapter 1 Introduction 1.1 Overview of Book", " Chapter 1 Introduction Motivation for book What readers can learn Feedback and errata 1.1 Overview of Book Explain the structure of the book "],
["basics.html", "Chapter 2 Basics 2.1 Quick Tips", " Chapter 2 Basics What should be known before reading this book Assumed knowledge of the basics of R Markdown 2.1 Quick Tips Short index of some basic ideas on how to improve R Markdown documents Include current date in R Markdown https://stackoverflow.com/questions/23449319/yaml-current-date-in-rmarkdown/23529410#23529410 "],
["latex.html", "Chapter 3 LaTeX 3.1 Inserting Commands 3.2 LaTeX preamble 3.3 Multi-figure plots 3.4 Cross-output 3.5 LaTeX subfigures 3.6 Changing citation Engine 3.7 Altering Citation Style", " Chapter 3 LaTeX For many authors, the main of long reports or books, the primary output will be LaTeX. In this chapter, we discuss approaches which can be used to customise the output of PDF reports. Users should approach with a note of caution. One of the major benefits of R Markdown is the fact that a single source document can create documents with multiple formats. By tailoring your work to a single output format (PDF/Word/HTML), you may improve the appearance and performance of a single output but at the expense of this tranferability. 3.1 Inserting Commands 3.2 LaTeX preamble 3.3 Multi-figure plots If we need to print multiple output graphs or figures, there are several ways this can be achieved. 3.4 Cross-output As explained in https://bookdown.org/yihui/rmarkdown/r-code.html#figures of (???), we can place multiple figures side-by-side using the fig.hold='hold' along with the out.width option. As an example below, we have set the out.width=&quot;50%&quot;: plot(1:10) plot(rnorm(10), pch=19) Figure 3.1: Side-by-side figures The main benefits of this approach is that it is easily achieved, and also works for both PDF and HTML outputs. 3.5 LaTeX subfigures When writing a document you may want to include some slightly more complicated figures with multiple images. Subfigures are a useful LaTeX feature which allows us to achieve this by plotting multiple figures within a single plot and providing each with their own subcaption. Subfigures require the LaTeX package subfig. The line \\usepackage{subfig} must therefore be included within the YAML, or if you are using an external tex template you can add this to that file. For example: As listed within the knitr chunk options, subfigures require a few additional settings to be set in the chunk header: fig.subcap is a list of the captions for subfigures fig.ncol: the number of columns of subfigures out.width: the output width of the figures. You will normally set this 100% divided by the number of sub columns. An example is demonstrated below: ```yaml output: pdf_document header-includes: - \\usepackage{subfig} ``` ```{r fig-sub, fig.cap=&#39;two plots&#39;, fig.subcap=c(&#39;one plot&#39;, &#39;the other one&#39;), out.width=&#39;.49\\\\linewidth&#39;, fig.asp=1, fig.ncol = 2} plot(1:10) plot(rnorm(10), pch=19) ``` The output is shown in Figure 3.2. knitr::include_graphics(&quot;images/subfigure.png&quot;, dpi = NA) Figure 3.2: An example subcaption 3.5.1 Using with list 3.6 Changing citation Engine 3.7 Altering Citation Style Using short author citations: https://stackoverflow.com/questions/48303890/using-short-author-citations-in-bookdown-rmarkdown?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa "],
["html-output.html", "Chapter 4 HTML Output 4.1 Tabbed headings", " Chapter 4 HTML Output How to customise the appearance of HTML documents: CSS styles Adapt some of the details from here: https://rmarkdown.rstudio.com/html_document_format.html 4.1 Tabbed headings https://stackoverflow.com/questions/38062706/rmarkdown-tabbed-and-untabbed-headings?utm_medium=organic&amp;utm_source=google_rich_qa&amp;utm_campaign=google_rich_qa "],
["multi-format-projects.html", "Chapter 5 Multi-format projects 5.1 Control Output 5.2 Output-specific functions 5.3 Designing output", " Chapter 5 Multi-format projects One of the main benefits of R Markdown can create multiple output formats from a single source document. This book example is available in all three formats, with PDF, ebook and online versions all being available. Project should therefore ideally be designed to be flexible for the multiple outputs. However, users will often find themselves wanting to fine-tune the output, and doing so will often require This chapter aims to provide several examples on how a document can be customised with output specific features, whilst also retaining the ability to export documents to multiple formats. 5.1 Control Output Dsigning custom behavior which can respond to change in outputs using is_latex_output etc. For example, you may want to have interactive tables using DT:datatable in the HTML output but print static versions in the PDF. 5.2 Output-specific functions HTML documents have the capacity to contain. The webshot package is available to take screenshots of HTML elements for non-interactive output formats (ebooks, PDF). library(ggplot2) library(plotly) p &lt;- ggplot(data = diamonds, aes(x = cut, fill = clarity)) + geom_bar(position = &quot;dodge&quot;) ggplotly(p) 5.3 Designing output If we wish to design our own format-specific function we can use the functions knitr::is_latex_output() andknitr::is_html_output`. These function will return a TRUE/FALSE action knitr::is_html_output() This can be used to control the output of statements. "],
["knitr-hooks.html", "Chapter 6 Knitr Hooks", " Chapter 6 Knitr Hooks Knitr hooks: these are explained within previous R Markdown book Include practical examples could be very useful for readers to see the power of it. Use some of these: https://gist.github.com/yihui/2629886 "],
["tables.html", "Chapter 7 Tables", " Chapter 7 Tables provide more detailed documentation on kable Using kableExtra to style tables "],
["managing-big-projects.html", "Chapter 8 Managing Big Projects 8.1 Sourcing Files 8.2 Caching 8.3 Notifications", " Chapter 8 Managing Big Projects Practical tips on how a big project should be managed source is particularly useful for loading external scripts so that the R Markdown project isnâ€™t too bloated with code. Ideas: - Use (ref:tag) to store page formatting options which might need to be reused. For example a page break 8.1 Sourcing Files A benefit of using R Markdown is that it is easy source(&quot;yourScript.R&quot;) 8.2 Caching Caching Ways it can be tailored to suit analysis. This cache invalidation is a great example: https://stackoverflow.com/questions/18376008/invalidate-a-chunks-cache-when-uncached-chunk-changes 8.3 Notifications Can link R Markdown with notifications if have long analysis Working with non R users Use HTML outputs and interactive graphics "],
["diagrams.html", "Chapter 9 Diagrams 9.1 Basic Diagrams 9.2 Adding parameters to plots", " Chapter 9 Diagrams It is often useful to express analysis using flowcharts and diagrams within reports. Although there are many separate programs which can be used to produce these, it can be beneficial to create these within our analysis directly. This makes it easier to update and edit the graph if we need to edit it in the future, and allows us to use the results from our analysis directly within the diagrams, making them more information. While there are several different packages available for R, we will focus on the package DiagrammeR (Iannone 2018). We also recommend that you read at http://rich-iannone.github.io/DiagrammeR/index.html . In this chapter we will explain some of the basic usages of the package. 9.1 Basic Diagrams DiagrammeR provides methods to build graphs for a number of different graphing languages. R Studio provides native support for Graphviz (.gv) and mermaid (.mmd) files. Using files of these types in RStudio provides the advantage of syntax coloring and allowing a quick preview of the diagram. For example, we can make a simple flowchart with the following code: DiagrammeR::grViz(&quot;digraph { graph [layout = dot, rankdir = LR] node [shape = rectangle] rec1 [label = &#39;Step 1&#39;] rec2 [label = &#39;Step 2&#39;] rec3 [label = &#39;Step 3&#39;] rec4 [label = &#39;Step 4&#39;] # edge definitions with the node IDs rec1 -&gt; rec2 -&gt; rec3 -&gt; rec4 }&quot;, height = 200) Figure 9.1: A basic graphic using DiagrammeR There are extensive controls which can be used to control the shape of nodes, colours, line types and add additional parameters. 9.2 Adding parameters to plots We can allow Graphviz substitution allows for mixing in R expressions into a Graphviz graph specification without sacrificing readability. If you specify a subsitution with @@, you must ensure there is a valid expression for that substitution. The expressions are placed as footnotes and their evaluations must result in an R vector object (i.e., not a data frame, list, or matrix). Because there is the possibility to have multiple substitutions, numbering is required. Thus, the @@ notation is immediately followed by a number and that number should correspond to the number of the footnoted R expression. For example, suppose we have a dataset which is being analysed, and we would like to identify how many values are removed at each stage of a process. DiagrammeR::grViz(&quot; digraph graph2 { graph [layout = dot, rankdir = LR] # node definitions with substituted label text node [shape = rectangle] a [label = &#39;@@1&#39;] b [label = &#39;@@2&#39;] c [label = &#39;@@3&#39;] d [label = &#39;@@4&#39;] a -&gt; b -&gt; c -&gt; d } [1]: paste(&#39;Input Data&#39;, 1) [2]: paste(&#39;Step &#39;, 1) [3]: paste(&#39;Step &#39;, 1) [4]: paste(&#39;Step &#39;, 1) &quot;) References "],
["references.html", "Chapter 10 References", " Chapter 10 References "]
]
